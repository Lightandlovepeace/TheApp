"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const config_plugins_1 = require("@expo/config-plugins");
// Default usage descriptions
const PROTOCOLS = ['com.apple.m1'];
const PERIPHERAL_SHARE = 'Allow $(PRODUCT_NAME) to check bluetooth peripheral info';
const ALWAYS_SHARE = 'Allow $(PRODUCT_NAME) to always use bluetooth info';
// iOS modifier sets
//  > NSBluetoothPeripheralUsageDescription
//  > NSBluetoothAlwaysUsageDescription
//  > UISupportedExternalAccessoryProtocols
const withIosBLC = (config, { peripheralUsageDescription, alwaysUsageDescription, protocols } = {}) => {
    config = config_plugins_1.withInfoPlist(config, (config) => {
        // config = {modResults, modRequests, ...}
        config.modResults.NSBluetoothPeripheralUsageDescription =
            peripheralUsageDescription ?
                peripheralUsageDescription :
                PERIPHERAL_SHARE;
        config.modResults.NSBluetoothAlwaysUsageDescription =
            alwaysUsageDescription ?
                alwaysUsageDescription :
                ALWAYS_SHARE;
        config.modResults.UISupportedExternalAccessoryProtocols =
            protocols ?
                protocols :
                PROTOCOLS;
        return config;
    });
    return config;
};
// Android modifier sets permissions
//  > BLUETOOTH
//  > BLUETOOTH_ADMIN
//  > ACCESS_FINE_LOCATION
//  > BLUETOOTH_CONNECT
//  > BLUETOOTH_SCAN
//  > BLUETOOTH_ADVERTISE
const withAndroidBLC = (config, options = {}) => {
    config = config_plugins_1.AndroidConfig.Permissions.withPermissions(config, [
        'android.permission.BLUETOOTH',
        'android.permission.BLUETOOTH_ADMIN',
        'android.permission.ACCESS_FINE_LOCATION',
        'android.permission.BLUETOOTH_CONNECT',
        'android.permission.BLUETOOTH_SCAN',
        'android.permission.BLUETOOTH_ADVERTISE',
    ]);
    return config;
};
// iOS + Android modifier
const withBLC = (config, { peripheralUsageDescription, alwaysUsageDescription, protocols } = {}) => {
    config = withIosBLC(config, { peripheralUsageDescription, alwaysUsageDescription, protocols });
    config = withAndroidBLC(config, {});
    return config;
};
module.exports = withBLC;
